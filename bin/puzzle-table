#!/usr/bin/env rakudo

use v6.d;

# Setup temporary paths to Gtk4 development area
use lib
  "/home/marcel/Languages/Raku/Projects/gnome-source-skim-tool/gnome-api2/gnome-native/lib",
  "/home/marcel/Languages/Raku/Projects/gnome-source-skim-tool/gnome-api2/gnome-glib/lib",
  "/home/marcel/Languages/Raku/Projects/gnome-source-skim-tool/gnome-api2/gnome-gobject/lib",
  "/home/marcel/Languages/Raku/Projects/gnome-source-skim-tool/gnome-api2/gnome-gio/lib",
  "/home/marcel/Languages/Raku/Projects/gnome-source-skim-tool/gnome-api2/gnome-gdkpixbuf/lib",
  "/home/marcel/Languages/Raku/Projects/gnome-source-skim-tool/gnome-api2/gnome-pango/lib",
#  "/gnome-cairo/lib",
#  "/gnome-atk/lib",
  "/home/marcel/Languages/Raku/Projects/gnome-source-skim-tool/gnome-api2/gnome-gtk4/lib",
  "/home/marcel/Languages/Raku/Projects/gnome-source-skim-tool/gnome-api2/gnome-gdk4/lib",
#  "/gnome-gsk4/lib"
  ;

use YAMLish;

use PuzzleTable::Types;
use PuzzleTable::Gui::MainWindow;


#-------------------------------------------------------------------------------
# Load puzzle data in global Hash
my Hash $*puzzle-data = %();
$*puzzle-data = load-yaml(PUZZLE_DATA.IO.slurp) if PUZZLE_DATA.IO.r;

# Check categories
$*puzzle-data<categories> = %() unless $*puzzle-data<categories>:exists;

# Check for the Default category and set lockable to False
$*puzzle-data<categories><Default> = %( members => %(), :!lockable)
  unless $*puzzle-data<categories><Default>:exists;

# Check for the Trash category and set lockable to False
$*puzzle-data<categories><Trash> = %( members => %(), :!lockable)
  unless $*puzzle-data<categories><Trash>:exists;

$*puzzle-data<settings> = %() unless $*puzzle-data<settings>:exists;

# Force lockable categories locked at the start of the program
$*puzzle-data<settings><locked> = True;

#-------------------------------------------------------------------------------
# Show puzzle table. return only when finished
my PuzzleTable::Gui::MainWindow $puzzles .= new;
$puzzles.go-ahead;
