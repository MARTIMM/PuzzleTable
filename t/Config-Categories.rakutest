use v6.d;
use Test;

use YAMLish;
use Digest::SHA256::Native;

use PuzzleTable::Config::Categories;

#-------------------------------------------------------------------------------
constant TESTDATA = 't/test-data/';
constant COLLDATA = TESTDATA ~ 'puzzle-collection/';
constant EXPDATA = TESTDATA ~ 'exported-puzzles/';
constant ARCHDATA = TESTDATA ~ 'archived-puzzles/';
constant EXTRDATA = TESTDATA ~ 'puzzle-extract/';
constant CONFDATA = TESTDATA ~ 'puzzle-table-data/';

cleanup-puzzle-table-data(CONFDATA);


my PuzzleTable::Config::Categories $categories .= new(:root-dir(CONFDATA));
with $categories {
  is .get-password, '', '.get-password()';
  ok .check-password(''), '.check-password()';

  .set-password( '', 'hoeperdepoep');
  ok .check-password('hoeperdepoep'), '.set-password()';


  #$category .= new( :category-name<cat-2>, :root-dir(CONFDATA));
  my Str $message = .add-category( 'cat-2', :lockable);
  ok ! $message, '.add-category()';
  $message = .add-category( 'cat-2', :lockable);
  is $message, "Category Cat-2 already exists", '.add-category() 2nd time fail';
  $message = .add-category( 'cat-1', :!lockable);

  is .get-current-category, 'Default', '.get-current-category(): Default';

  $message = .select-category('Cat-3');
  is $message, 'Category Cat-3 does not exist',
     '.select-category(); Cat-3 not found';
  $message = .select-category('Cat-2');
  ok ! $message, '.select-category(); Cat-2 found';
  is .get-current-category, 'Cat-2', '.get-current-category(); Cat-2';

  ok ! .is-category-lockable('Cat-1'),
       '.is-category-lockable() Cat 1 not lockable';
  ok .is-category-lockable('Cat-2'), '.is-category-lockable() Cat 2 lockable';

  $message = .import-collection('some-where-else');
  is $message, 'Collection path does not exist or isn\'t a directory',
     '.import-collection(); collection not found';

  $message = .import-collection(COLLDATA);
  ok ! $message, '.import-collection(); puzzles imported from collection';

  .save-categories-config;
  my Hash $config;

  $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
  is $config<categories>.elems, 3, '.save-categories-config()';
  ok $config<categories><Cat-2><lockable>, 'Check categories config';

  $config = load-yaml("{CONFDATA}Cat-2/puzzles.yaml".IO.slurp);
  is $config<members>.elems, 2, 'Check category config';
#note $config.gist();

  .add-puzzle(EXPDATA ~ 'e1.puzzle');
  .save-categories-config;

  $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
  $config = load-yaml("{CONFDATA}Cat-2/puzzles.yaml".IO.slurp);
  is $config<members>.elems, 3, '.add-puzzle()';
#note $config.gist();

  $message = .remove-puzzle( 'p0005', ARCHDATA);
  is $message, 'Puzzle id is wrong and/or Puzzle store not found',
     '.remove-puzzle(): wrong puzzle id';

  $message = .remove-puzzle( 'p000', ARCHDATA);
  .save-categories-config;
  $config = load-yaml("{CONFDATA}Cat-2/puzzles.yaml".IO.slurp);
  is $config<members>.elems, 2, '.remove-puzzle()';
  ok $config<members><p000>:!exists, '.remove-puzzle(): Config check';

  $message = .restore-puzzle( ARCHDATA, '20240523-182323-830.tbz2');
  .save-categories-config;
  $config = load-yaml("{CONFDATA}Cat-2/puzzles.yaml".IO.slurp);
  is $config<members>.elems, 3, '.restore-puzzle()';
  ok $config<members><p003>:exists, '.restore-puzzle(): Config check';

  my Array $puzzles = [|.get-puzzles];
  is $puzzles.elems, 3, '.get-puzzles(); Check nbr puzzles returned';
  ok $puzzles[0]<Category> eq
        $puzzles[1]<Category> eq
        $puzzles[2]<Category> eq 'Cat-2',
         '.get-puzzles(); Check puzzles category';
  ok $puzzles[0]<PieceCount> <=
        $puzzles[1]<PieceCount> <=
        $puzzles[2]<PieceCount>, '.get-puzzles(); Check order';

#  note $puzzles.gist;

  .set-palapeli-preference('Flatpak');
  .save-categories-config;
  $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
  is $config<palapeli><preference>, 'Standard', '.set-palapeli-preference()';

# Works! lives-ok { .run-palapeli($puzzles[2]); }, 'run-palapeli()';
}

done-testing;
exit;

#-------------------------------------------------------------------------------
sub cleanup-puzzle-table-data ( Str:D $d ) {
  return unless $d.IO.d;

  for dir($d) -> $f {
    if $f.d {
      cleanup-puzzle-table-data($f.Str);
      $f.rmdir;
    }

    else {
      $f.unlink;
    }
  }
}
