use v6.d;
use Test;

use YAMLish;
use Digest::SHA256::Native;

use PuzzleTable::Config::Categories;

#-------------------------------------------------------------------------------
constant TESTDATA = $*CWD ~ '/t/test-data/';
constant COLLDATA = TESTDATA ~ 'puzzle-collection/';
constant EXPDATA = TESTDATA ~ 'exported-puzzles/';
constant ARCHDATA = TESTDATA ~ 'archived-puzzles/';
constant EXTRDATA = TESTDATA ~ 'puzzle-extract/';
constant CONFDATA = TESTDATA ~ 'puzzle-table-data/';

cleanup-puzzle-table-data(CONFDATA);

my Str $message;
my Hash $config;

my PuzzleTable::Config::Categories $categories .= new(:root-dir(CONFDATA));
subtest 'password', {
  with $categories {
    is .get-password, '', '.get-password()';
    ok .check-password(''), '.check-password()';

    .set-password( '', 'hoeperdepoep');
    ok .check-password('hoeperdepoep'), '.set-password()';
  }
}

subtest 'category', {
  with $categories {
    #$category .= new( :category-name<cat-2>, :root-dir(CONFDATA));
    $message = .add-category( 'cat-2', :lockable);
    ok ! $message, '.add-category()';
    $message = .add-category( 'cat-2', :lockable);
    is $message, "Category Cat-2 already exists", '.add-category() 2nd time fail';
    $message = .add-category( 'cat-1', :!lockable);

    is .get-current-category, 'Default', '.get-current-category(): Default';

    $message = .select-category('Cat-3');
    is $message, 'Category Cat-3 does not exist',
      '.select-category(); Cat-3 not found';
    $message = .select-category('Cat-2');
    ok ! $message, '.select-category(); Cat-2 found';
    is .get-current-category, 'Cat-2', '.get-current-category(); Cat-2';

    ok ! .is-category-lockable('Cat-1'),
        '.is-category-lockable() Cat 1 not lockable';
    ok .is-category-lockable('Cat-2'), '.is-category-lockable() Cat 2 lockable';
  }
}

subtest 'puzzle', {
  with $categories {
    $message = .import-collection('some-where-else');
    is $message, 'Collection path does not exist or isn\'t a directory',
      '.import-collection(); collection not found';

    $message = .import-collection(COLLDATA);
    ok ! $message, '.import-collection(); puzzles imported from collection';

    $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
    is $config<categories>.elems, 3, '.save-categories-config() (implicit)';
    ok $config<categories><Cat-2><lockable>, 'Check categories config';
    $config = load-yaml("{CONFDATA}Cat-2/puzzles.yaml".IO.slurp);
    is $config<members>.elems, 2, 'Check category config';

    .add-puzzle(EXPDATA ~ 'e1.puzzle');
    $config = load-yaml("{CONFDATA}Cat-2/puzzles.yaml".IO.slurp);
    is $config<members>.elems, 3, '.add-puzzle()';

    my @ap = .archive-puzzles( ['p0005', ], ARCHDATA);
    is @ap[0], 'One of the puzzle ids is wrong and/or puzzle store not found',
      '.archive-puzzles(): wrong puzzle id';
    @ap = .archive-puzzles( ['p000', ], ARCHDATA);

    $config = load-yaml("{CONFDATA}Cat-2/puzzles.yaml".IO.slurp);
    is $config<members>.elems, 2, '.archive-puzzles()';
    ok $config<members><p000>:!exists, '.archive-puzzles(): Config check';

    my $archive-name = @ap[1];
    $message = .restore-puzzles( ARCHDATA, $archive-name);
    $config = load-yaml("{CONFDATA}Cat-2/puzzles.yaml".IO.slurp);
    is $config<members>.elems, 3, '.restore-puzzles()';
    ok $config<members><p002>:exists, '.restore-puzzles(): Config check';

    my Array $puzzles = [|.get-puzzles];
    is $puzzles.elems, 3, '.get-puzzles(); Check nbr puzzles returned';
    ok $puzzles[0]<Category> eq
          $puzzles[1]<Category> eq
          $puzzles[2]<Category> eq 'Cat-2',
          '.get-puzzles(); Check puzzles category';
    ok $puzzles[0]<PieceCount> <=
          $puzzles[1]<PieceCount> <=
          $puzzles[2]<PieceCount>, '.get-puzzles(); Check order';
  }
}

subtest 'palapeli', {
  with $categories {

  #  note $puzzles.gist;

    .set-palapeli-preference('Flatpak');
    #.save-categories-config;
    $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
    is $config<palapeli><preference>, 'Flatpak', '.set-palapeli-preference()';

    # Works!
    #lives-ok { .run-palapeli($puzzles[2]); }, '.run-palapeli()';
  }
}


subtest 'move', {
  with $categories {

    .move-category( 'Cat-1', 'Cat-5');
    #.save-categories-config;
    $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
    ok $config<categories><Cat-5>:exists, '.move-category()';

    .select-category('Cat-2');
    .move-puzzle( 'Cat-5', 'p002');
    $config = load-yaml("{CONFDATA}Cat-2/puzzles.yaml".IO.slurp);
    ok $config<members><p002>:!exists, '.move-puzzle(): Config check';
    $config = load-yaml("{CONFDATA}Cat-5/puzzles.yaml".IO.slurp);
    ok $config<members><p000>:exists, '.move-puzzle(): Config check';

    my Array $sts = .get-category-status('Cat-5');
    lives-ok { .update-category-status; }, '.update-category-status()';
    #.save-categories-config;
    $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
    is-deeply $config<categories><Cat-5><status>, $sts,
      '.get-category-status()';

    my Seq $cats = .get-categories;
    is $cats.elems, 2, '.get-categories(): lockable filtered';
    lives-ok { .unlock('hoeperdepoep'); }, '.unlock()';
    $cats = .get-categories;
    is $cats.elems, 3, '.get-categories(): lock filtered, unlocked';
  }
}


subtest 'grouping', {
  with $categories {
    $message = .add-category( 'opt 1', :!lockable);
    $message = .add-category( 'opt 2', :!lockable);
    $message = .add-category( 'opt 3', :!lockable);
    .group-in-subcategory( 'options', 'opt 1');
    .group-in-subcategory( 'options', 'opt 2');
    .group-in-subcategory( 'options', 'opt 3');

    #.save-categories-config;
    $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
    ok $config<categories><Options_EX_>:exists,
      '.group-in-subcategory() subcategory';
    is $config<categories><Options_EX_><categories>.elems, 3,
      '.group-in-subcategory() elems';

    my Seq $cats = .get-categories;
    is $cats.elems, 4, '.get-categories(): unfiltered, top level';
    is-deeply $cats, ( 'Cat-2', 'Cat-5', 'Default', 'Options_EX_'),
      '.get-categories(): check keynames';
    $cats = .get-categories(:category-container<options>);
    is $cats.elems, 3, '.get-categories(): unfiltered, sub cat';
    is-deeply $cats, ( 'Opt 1', 'Opt 2', 'Opt 3'),
      '.get-categories(): check key names in subcat';

    $message = .select-category('opt 1');
    is $message, "Category Opt 1 does not exist",
       '.select-category() subcat fail';
    $message = .select-category( 'opt 1', :category-container<options>);
    ok !$message, '.select-category() found in options subcat';

    .ungroup-from-subcategory( 'options', 'opt 1');
    $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
    is $config<categories><Options_EX_><categories>.elems, 2,
       '.ungroup-from-subcategory() elems';
    ok $config<categories><opt 1>:exists, '.ungroup-from-subcategory() check';

    .ungroup-from-subcategory( 'options', 'opt 2');
    $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
    ok $config<categories><Options_EX_><categories>:exists,
       '.ungroup-from-subcategory() sub cat still exists';

    .ungroup-from-subcategory( 'options', 'opt 3');
    $config = load-yaml("{CONFDATA}categories.yaml".IO.slurp);
    is $config<categories><Options_EX_><categories>.elems, 0,
       '.ungroup-from-subcategory() subcat empty';

    $message =
      .add-category( 'set 1', :category-container<sets>, :!lockable);
    $message =
      .add-category( 'set 2', :category-container<sets>, :!lockable);
    $cats = .get-categories(:category-container<sets>);
    is-deeply $cats, ( 'Set 1', 'Set 2' ), '.add-category() add in container';
    $message =
      .add-category( 'set 2', :category-container<sets>, :!lockable);
    is $message, "Category Set 2 already exists",
       '.add-category(): ' ~ $message;

    .select-category( 'set 2', :category-container<sets>);
    .add-puzzle(EXPDATA ~ 'e2.puzzle');
    $config = load-yaml("{CONFDATA}Set 2/puzzles.yaml".IO.slurp);
    is $config<members>.elems, 1, '.add-puzzle() in container Sets';

    my Array $puzzles = [|.get-puzzles()];
    .move-puzzle( 'set 1', $puzzles[0]<PuzzleID>);
    $config = load-yaml("{CONFDATA}Set 1/puzzles.yaml".IO.slurp);
    is $config<members>.elems, 1, '.move-puzzle() in container Sets';
  }
}


subtest 'container', {
  with $categories {
    my Str $container = .find-container('set 1');
    is $container, 'Sets', '.find-container(): found Set 1 in Sets';
    $container = .find-container('opt 1');
    is $container, '', '.find-container(): found Opt 1';
    $container = .find-container('opt 1001');
    ok !$container.defined, '.find-container(): Did not find Opt 1001';

    ok .add-container('abc'), '.add-container()';
    nok .add-container('abc'), '.add-container() duplicate';
    is-deeply .get-containers, ( 'Abc', 'Options', 'Sets'), '.get-containers()';

    nok .delete-container('sets'), '.delete-container(): container not empty';
    ok .delete-container('abc'), '.delete-container(): container deleted';

    $message = .set-expand( 'set-container', True);
    is $message, 'Container does not exist', '.set-expand(): no container';
    $message = .set-expand( 'sets', True);
    ok !$message, '.set-expand(): ok';

    ok .is-expanded('sets'), '.is-expanded(): True';
    ok !.is-expanded('options'), '.is-expanded(): False - not set';
  }
}

subtest 'category continued', {
  with $categories {
    ok .has-puzzles('cat-2'), '.has-puzzles()';

    $message = .delete-category('cat-2');
    is $message, 'Category still has puzzles', '.delete-category(): not empty';

    $message = .delete-category('opt 2');
    ok !$message, '.delete-category(): empty -> deleted';

    .add-category( 'set 25', :category-container<sets>, :!lockable);
    .add-category( 'set 26', :category-container<sets>, :!lockable);
    $message = .delete-category('set 25');
    ok !$message, '.delete-category(): empty -> deleted from container';
    $message = .delete-category('set 25');
    is $message, 'Category does not exist',
       '.delete-category(): category does not exist';
  }
}


done-testing;
exit;

#-------------------------------------------------------------------------------
sub cleanup-puzzle-table-data ( Str:D $d ) {
  return unless $d.IO.d;

  for dir($d) -> $f {
    if $f.d {
      cleanup-puzzle-table-data($f.Str);
      $f.rmdir;
    }

    else {
      $f.unlink;
    }
  }
}
